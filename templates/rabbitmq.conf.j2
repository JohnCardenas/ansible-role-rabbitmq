{% include 'core.conf.j2' %}

## ----------------------------------------------------------------------------
## RabbitMQ Management Plugin
##
## Related doc guide: https://rabbitmq.com/management.html.
## ----------------------------------------------------------------------------

# =======================================
# Management section
# =======================================

## Preload schema definitions from the following JSON file.
## Related doc guide: https://rabbitmq.com/management.html#load-definitions.
##
# management.load_definitions = /path/to/exported/definitions.json
{% if rabbitmq.config.management.load_definitions is defined %}
management.load_definitions = {{ rabbitmq.config.management.load_definitions }}
{% endif %}

## Log all requests to the management HTTP API to a file.
##
# management.http_log_dir = /path/to/access.log
{% if rabbitmq.config.management.http_log_dir is defined %}
management.http_log_dir = {{ rabbitmq.config.management.http_log_dir }}
{% endif %}

## HTTP listener and embedded Web server settings.
# ## See https://rabbitmq.com/management.html for details.
#
# management.tcp.port = 15672
# management.tcp.ip   = 0.0.0.0
#
# management.tcp.shutdown_timeout   = 7000
# management.tcp.max_keepalive      = 120
# management.tcp.idle_timeout       = 120
# management.tcp.inactivity_timeout = 120
# management.tcp.request_timeout    = 120
# management.tcp.compress           = true

{% if rabbitmq.config.management.tcp.ip is defined %}
management.tcp.port = 15672
management.tcp.ip = {{ rabbitmq.config.management.tcp.ip|default('0.0.0.0') }}
{% endif %}
{% if rabbitmq.config.management.tcp.shutdown_timeout is defined %}
management.tcp.shutdown_timeout = {{ rabbitmq.config.management.tcp.shutdown_timeout|default(7000) }}
{% endif %}
{% if rabbitmq.config.management.tcp.max_keepalive is defined %}
management.tcp.max_keepalive = {{ rabbitmq.config.management.tcp.max_keepalive|default(120) }}
{% endif %}
{% if rabbitmq.config.management.tcp.idle_timeout is defined %}
management.tcp.idle_timeout = {{ rabbitmq.config.management.tcp.idle_timeout|default(120) }}
{% endif %}
{% if rabbitmq.config.management.tcp.inactivity_timeout is defined %}
management.tcp.inactivity_timeout = {{ rabbitmq.config.management.tcp.inactivity_timeout|default(120) }}
{% endif %}
{% if rabbitmq.config.management.tcp.request_timeout is defined %}
management.tcp.request_timeout = {{ rabbitmq.config.management.tcp.request_timeout|default(120) }}
{% endif %}
{% if rabbitmq.config.management.tcp.compress is defined %}
management.tcp.compress = {{ rabbitmq.config.management.tcp.compress|default('true') }}
{% endif %}

## HTTPS listener settings.
## See https://rabbitmq.com/management.html and https://rabbitmq.com/ssl.html for details.
##
# management.ssl.port       = 15671
# management.ssl.cacertfile = /path/to/ca_certificate.pem
# management.ssl.certfile   = /path/to/server_certificate.pem
# management.ssl.keyfile    = /path/to/server_key.pem

## More TLS options
# management.ssl.honor_cipher_order   = true
# management.ssl.honor_ecc_order      = true
# management.ssl.client_renegotiation = false
# management.ssl.secure_renegotiate   = true

## Supported TLS versions
# management.ssl.versions.1 = tlsv1.2
# management.ssl.versions.2 = tlsv1.1

## Cipher suites the server is allowed to use
# management.ssl.ciphers.1 = ECDHE-ECDSA-AES256-GCM-SHA384
# management.ssl.ciphers.2 = ECDHE-RSA-AES256-GCM-SHA384
# management.ssl.ciphers.3 = ECDHE-ECDSA-AES256-SHA384
# management.ssl.ciphers.4 = ECDHE-RSA-AES256-SHA384
# management.ssl.ciphers.5 = ECDH-ECDSA-AES256-GCM-SHA384
# management.ssl.ciphers.6 = ECDH-RSA-AES256-GCM-SHA384
# management.ssl.ciphers.7 = ECDH-ECDSA-AES256-SHA384
# management.ssl.ciphers.8 = ECDH-RSA-AES256-SHA384
# management.ssl.ciphers.9 = DHE-RSA-AES256-GCM-SHA384

{% if rabbitmq.config.management.ssl.cacertfile is defined %}
management.ssl.cacertfile = {{ rabbitmq.config.management.ssl.cacertfile|default('/etc/ssl/certs/ca-bundle.crt') }}
{% endif %}
{% if rabbitmq.config.management.ssl.certfile is defined %}
management.ssl.port = 15671
management.ssl.certfile = {{ rabbitmq.config.management.ssl.certfile }}
{% endif %}
{% if rabbitmq.config.management.ssl.keyfile is defined %}
management.ssl.keyfile = {{ rabbitmq.config.management.ssl.keyfile }}
{% endif %}
{% if rabbitmq.config.management.ssl.honor_cipher_order is defined %}
management.ssl.honor_cipher_order = {{ rabbitmq.config.management.ssl.honor_cipher_order|default('true') }}
{% endif %}
{% if rabbitmq.config.management.ssl.honor_ecc_order is defined %}
management.ssl.honor_ecc_order = {{ rabbitmq.config.management.ssl.honor_ecc_order|default('true') }}
{% endif %}
{% if rabbitmq.config.management.ssl.client_renegotiation is defined %}
management.ssl.client_renegotiation = {{ rabbitmq.config.management.ssl.client_renegotiation|default('false') }}
{% endif %}
{% if rabbitmq.config.management.ssl.secure_renegotiate is defined %}
management.ssl.secure_renegotiate = {{ rabbitmq.config.management.ssl.secure_renegotiate|default('true') }}
{% endif %}

{% for item in rabbitmq.config.management.ssl.versions|default([]) %}
management.ssl.versions.{{loop.index}} = {{item}}
{% endfor %}

{% for item in rabbitmq.config.management.ssl.ciphers|default([]) %}
management.ssl.ciphers.{{loop.index}} = {{item}}
{% endfor %}

## One of 'basic', 'detailed' or 'none'. See
## https://rabbitmq.com/management.html#fine-stats for more details.
# management.rates_mode = basic
{% if rabbitmq.config.management.rates_mode is defined %}
management.rates_mode = {{ rabbitmq.config.management.rates_mode|default('basic') }}
{% endif %}

## Configure how long aggregated data (such as message rates and queue
## lengths) is retained. Please read the plugin's documentation in
## https://rabbitmq.com/management.html#configuration for more
## details.
## Your can use 'minute', 'hour' and 'day' keys or integer key (in seconds)
# management.sample_retention_policies.global.minute = 5
# management.sample_retention_policies.global.hour   = 60
# management.sample_retention_policies.global.day    = 1200
# management.sample_retention_policies.basic.minute  = 5
# management.sample_retention_policies.basic.hour    = 60
# management.sample_retention_policies.detailed.10   = 5

{% for global_policies in rabbitmq.config.management.sample_retention_policies.global|default([]) %}
{% for key, value in global_policies.items() %}
management.sample_retention_policies.global.{{key}} = {{value}}
{% endfor %}
{% endfor %}
{% for basic_policies in rabbitmq.config.management.sample_retention_policies.basic|default([]) %}
{% for key, value in basic_policies.items() %}
management.sample_retention_policies.basic.{{key}} = {{value}}
{% endfor %}
{% endfor %}
{% for detailed_policies in rabbitmq.config.management.sample_retention_policies.detailed|default([]) %}
{% for key, value in detailed_policies.items() %}
management.sample_retention_policies.detailed.{{key}} = {{value}}
{% endfor %}
{% endfor %}



## ----------------------------------------------------------------------------
## RabbitMQ Shovel Plugin
##
## Related doc guide: https://rabbitmq.com/shovel.html
## ----------------------------------------------------------------------------

## See advanced.config.example for a Shovel plugin example


## ----------------------------------------------------------------------------
## RabbitMQ STOMP Plugin
##
## Related doc guide: https://rabbitmq.com/stomp.html
## ----------------------------------------------------------------------------

# =======================================
# STOMP section
# =======================================

## See https://rabbitmq.com/stomp.html for details.

## TCP listeners.
##
# stomp.listeners.tcp.1 = 127.0.0.1:61613
# stomp.listeners.tcp.2 = ::1:61613

{% for item in rabbitmq.config.stomp.listeners.tcp|default([]) %}
stomp.listeners.tcp.{{loop.index}} = {{item}}:61613
{% endfor %}

## TCP listener settings
##
# stomp.tcp_listen_options.backlog   = 2048
# stomp.tcp_listen_options.recbuf    = 131072
# stomp.tcp_listen_options.sndbuf    = 131072
#
# stomp.tcp_listen_options.keepalive = true
# stomp.tcp_listen_options.nodelay   = true
#
# stomp.tcp_listen_options.exit_on_close = true
# stomp.tcp_listen_options.send_timeout  = 120

{% if rabbitmq.config.stomp.tcp_listen_options is defined %}
stomp.tcp_listen_options.backlog   = {{ rabbitmq.config.stomp.tcp_listen_options.backlog|default(2048) }}
stomp.tcp_listen_options.recbuf    = {{ rabbitmq.config.stomp.tcp_listen_options.recbuf|default(131072) }}
stomp.tcp_listen_options.sndbuf    = {{ rabbitmq.config.stomp.tcp_listen_options.sndbuf|default(131072) }}

stomp.tcp_listen_options.keepalive = {{ rabbitmq.config.stomp.tcp_listen_options.keepalive|default('true') }}
stomp.tcp_listen_options.nodelay   = {{ rabbitmq.config.stomp.tcp_listen_options.nodelay|default('true') }}

stomp.tcp_listen_options.exit_on_close = {{ rabbitmq.config.stomp.tcp_listen_options.exit_on_close|default('true') }}
stomp.tcp_listen_options.send_timeout  = {{ rabbitmq.config.stomp.tcp_listen_options.send_timeout|default(120) }}
{% endif %}

## Proxy protocol support
##
# stomp.proxy_protocol = false
{% if rabbitmq.config.stomp.proxy_protocol is defined %}
stomp.proxy_protocol = {{ rabbitmq.config.stomp.proxy_protocol|default('false') }}
{% endif %}

## TLS listeners
## See https://rabbitmq.com/stomp.html and https://rabbitmq.com/ssl.html for details.
# stomp.listeners.ssl.default = 61614
#
# ssl_options.cacertfile = path/to/cacert.pem
# ssl_options.certfile   = path/to/cert.pem
# ssl_options.keyfile    = path/to/key.pem
# ssl_options.verify     =  verify_peer
# ssl_options.fail_if_no_peer_cert = true

{% for item in rabbitmq.config.stomp.listeners.ssl|default([]) %}
stomp.listeners.ssl.{{loop.index}} = {{item}}:61614
{% endfor %}

## Number of Erlang processes that will accept connections for the TCP
## and TLS listeners.
##
# stomp.num_acceptors.tcp = 10
# stomp.num_acceptors.ssl = 1

{% if rabbitmq.config.stomp.num_acceptors.tcp is defined %}
stomp.num_acceptors.tcp = {{ rabbitmq.config.stomp.num_acceptors.tcp|default(10) }}
{% endif %}
{% if rabbitmq.config.stomp.num_acceptors.ssl is defined %}
stomp.num_acceptors.ssl = {{ rabbitmq.config.stomp.num_acceptors.ssl|default(1) }}
{% endif %}

## Additional TLS options

## Extract a name from the client's certificate when using TLS.
##
# stomp.ssl_cert_login = true
{% if rabbitmq.config.stomp.ssl_cert_login is defined %}
stomp.ssl_cert_login = {{ rabbitmq.config.stomp.ssl_cert_login|default('true') }}
{% endif %}

## Set a default user name and password. This is used as the default login
## whenever a CONNECT frame omits the login and passcode headers.
##
## Please note that setting this will allow clients to connect without
## authenticating!
##
# stomp.default_user = guest
# stomp.default_pass = guest
{% if rabbitmq.config.stomp.default_user is defined %}
stomp.default_user = {{ rabbitmq.config.stomp.default_user|default('guest') }}
{% endif %}
{% if rabbitmq.config.stomp.default_pass is defined %}
stomp.default_pass = {{ rabbitmq.config.stomp.default_pass|default('guest') }}
{% endif %}

## If a default user is configured, or you have configured use TLS client
## certificate based authentication, you can choose to allow clients to
## omit the CONNECT frame entirely. If set to true, the client is
## automatically connected as the default user or user supplied in the
## TLS certificate whenever the first frame sent on a session is not a
## CONNECT frame.
##
# stomp.implicit_connect = true
{% if rabbitmq.config.stomp.implicit_connect is defined %}
stomp.implicit_connect = {{ rabbitmq.config.stomp.implicit_connect|default('true') }}
{% endif %}

## Whether or not to enable proxy protocol support.
## Once enabled, clients cannot directly connect to the broker
## anymore. They must connect through a load balancer that sends the
## proxy protocol header to the broker at connection time.
## This setting applies only to STOMP clients, other protocols
## like MQTT or AMQP have their own setting to enable proxy protocol.
## See the plugins or broker documentation for more information.
##
# stomp.proxy_protocol = false
{% if rabbitmq.config.stomp.proxy_protocol is defined %}
stomp.proxy_protocol = {{ rabbitmq.config.stomp.proxy_protocol|default('false') }}
{% endif %}



## ----------------------------------------------------------------------------
## RabbitMQ MQTT Adapter
##
## See https://github.com/rabbitmq/rabbitmq-mqtt/blob/stable/README.md
## for details
## ----------------------------------------------------------------------------

# =======================================
# MQTT section
# =======================================

## TCP listener settings.
##
# mqtt.listeners.tcp.1 = 127.0.0.1:61613
# mqtt.listeners.tcp.2 = ::1:61613
{% for item in rabbitmq.config.mqtt.listeners.tcp|default([]) %}
mqtt.listeners.tcp.{{loop.index}} = {{item}}:1883
{% endfor %}

## TCP listener options (as per the broker configuration).
##
# mqtt.tcp_listen_options.backlog = 4096
# mqtt.tcp_listen_options.recbuf  = 131072
# mqtt.tcp_listen_options.sndbuf  = 131072
#
# mqtt.tcp_listen_options.keepalive = true
# mqtt.tcp_listen_options.nodelay   = true
#
# mqtt.tcp_listen_options.exit_on_close = true
# mqtt.tcp_listen_options.send_timeout  = 120

{% if rabbitmq.config.mqtt.tcp_listen_options is defined %}
mqtt.tcp_listen_options.backlog = {{ rabbitmq.config.mqtt.tcp_listen_options.backlog|default(4096) }}
mqtt.tcp_listen_options.recbuf  = {{ rabbitmq.config.mqtt.tcp_listen_options.recbuf|default(131072) }}
mqtt.tcp_listen_options.sndbuf  = {{ rabbitmq.config.mqtt.tcp_listen_options.sndbuf|default(131072) }}

mqtt.tcp_listen_options.keepalive = {{ rabbitmq.config.mqtt.tcp_listen_options.keepalive|default('true') }}
mqtt.tcp_listen_options.nodelay   = {{ rabbitmq.config.mqtt.tcp_listen_options.nodelay|default('true') }}

mqtt.tcp_listen_options.exit_on_close = {{ rabbitmq.config.mqtt.tcp_listen_options.exit_on_close|default('true') }}
mqtt.tcp_listen_options.send_timeout  = {{ rabbitmq.config.mqtt.tcp_listen_options.send_timeout|default(120) }}
{% endif %}

## TLS listener settings
## ## See https://rabbitmq.com/mqtt.html and https://rabbitmq.com/ssl.html for details.
#
# mqtt.listeners.ssl.default = 8883
#
# ssl_options.cacertfile = /path/to/tls/ca_certificate_bundle.pem
# ssl_options.certfile   = /path/to/tls/server_certificate.pem
# ssl_options.keyfile    = /path/to/tls/server_key.pem
# ssl_options.verify     = verify_peer
# ssl_options.fail_if_no_peer_cert  = true
#
{% for item in rabbitmq.config.mqtt.listeners.ssl|default([]) %}
mqtt.listeners.ssl.{{loop.index}} = {{item}}:8883
{% endfor %}

## Number of Erlang processes that will accept connections for the TCP
## and TLS listeners.
##
# mqtt.num_acceptors.tcp = 10
# mqtt.num_acceptors.ssl = 10
{% if rabbitmq.config.mqtt.num_acceptors.tcp is defined %}
mqtt.num_acceptors.tcp = {{ rabbitmq.config.mqtt.num_acceptors.tcp|default(10) }}
{% endif %}
{% if rabbitmq.config.mqtt.num_acceptors.ssl is defined %}
mqtt.num_acceptors.ssl = {{ rabbitmq.config.mqtt.num_acceptors.ssl|default(10) }}
{% endif %}

## Whether or not to enable proxy protocol support.
## Once enabled, clients cannot directly connect to the broker
## anymore. They must connect through a load balancer that sends the
## proxy protocol header to the broker at connection time.
## This setting applies only to STOMP clients, other protocols
## like STOMP or AMQP have their own setting to enable proxy protocol.
## See the plugins or broker documentation for more information.
##
# mqtt.proxy_protocol = false
{% if rabbitmq.config.mqtt.proxy_protocol is defined %}
mqtt.proxy_protocol = {{ rabbitmq.config.mqtt.proxy_protocol|default('false') }}
{% endif %}

## Set the default user name and password used for anonymous connections (when client
## provides no credentials). Anonymous connections are highly discouraged!
##
# mqtt.default_user = guest
# mqtt.default_pass = guest
{% if rabbitmq.config.mqtt.default_user is defined %}
mqtt.default_user = {{ rabbitmq.config.mqtt.default_user|default('guest') }}
{% endif %}
{% if rabbitmq.config.mqtt.default_pass is defined %}
mqtt.default_pass = {{ rabbitmq.config.mqtt.default_pass|default('guest') }}
{% endif %}

## Enable anonymous connections. If this is set to false, clients MUST provide
## credentials in order to connect. See also the mqtt.default_user/mqtt.default_pass
## keys. Anonymous connections are highly discouraged!
##
# mqtt.allow_anonymous = true
{% if rabbitmq.config.mqtt.allow_anonymous is defined %}
mqtt.allow_anonymous = {{ rabbitmq.config.mqtt.allow_anonymous|default('false') }}
{% endif %}

## If you have multiple vhosts, specify the one to which the
## adapter connects.
##
# mqtt.vhost = /
{% if rabbitmq.config.mqtt.vhost is defined %}
mqtt.vhost = {{ rabbitmq.config.mqtt.vhost }}
{% endif %}

## Specify the exchange to which messages from MQTT clients are published.
##
# mqtt.exchange = amq.topic
{% if rabbitmq.config.mqtt.exchange is defined %}
mqtt.exchange = {{ rabbitmq.config.mqtt.exchange }}
{% endif %}

## Specify TTL (time to live) to control the lifetime of non-clean sessions.
##
# mqtt.subscription_ttl = 1800000
{% if rabbitmq.config.mqtt.subscription_ttl is defined %}
mqtt.subscription_ttl = {{ rabbitmq.config.mqtt.subscription_ttl|default(1800000) }}
{% endif %}

## Set the prefetch count (governing the maximum number of unacknowledged
## messages that will be delivered).
##
# mqtt.prefetch = 10
{% if rabbitmq.config.mqtt.prefetch is defined %}
mqtt.prefetch = {{ rabbitmq.config.mqtt.prefetch|default(10) }}
{% endif %}



## ----------------------------------------------------------------------------
## RabbitMQ AMQP 1.0 Support
##
## See https://github.com/rabbitmq/rabbitmq-amqp1.0/blob/stable/README.md.
## ----------------------------------------------------------------------------

# =======================================
# AMQP 1.0 section
# =======================================


## Connections that are not authenticated with SASL will connect as this
## account. See the README for more information.
##
## Please note that setting this will allow clients to connect without
## authenticating!
##
# amqp1_0.default_user = guest
{% if rabbitmq.config.amqp1_0.default_user is defined %}
amqp1_0.default_user = {{ rabbitmq.config.amqp1_0.default_user|default('guest') }}
{% endif %}

## Enable protocol strict mode. See the README for more information.
##
# amqp1_0.protocol_strict_mode = false
{% if rabbitmq.config.amqp1_0.protocol_strict_mode is defined %}
amqp1_0.protocol_strict_mode = {{ rabbitmq.config.amqp1_0.protocol_strict_mode|default('false') }}
{% endif %}

## Logging settings.
##
## See https://rabbitmq.com/logging.html and https://github.com/erlang-lager/lager for details.
##

## Log directory, taken from the RABBITMQ_LOG_BASE env variable by default.
##
# log.dir = /var/log/rabbitmq
{% if rabbitmq.config.log.dir is defined %}
log.dir = {{ rabbitmq.config.log.dir|default('/var/log/rabbitmq') }}
{% endif %}

## Logging to file. Can be false or a filename.
## Default:
# log.file = rabbit.log

## To disable logging to a file
# log.file = false

{% if rabbitmq.config.log.file is defined %}
log.file = {{ rabbitmq.config.log.file }}
{% endif %}

## Log level for file logging
##
# log.file.level = info
{% if rabbitmq.config.log.level is defined %}
log.file.level = {{ rabbitmq.config.log.level|default('info') }}
{% endif %}

## File rotation config. No rotation by default.
## DO NOT SET rotation date to ''. Leave the value unset if "" is the desired value
# log.file.rotation.date = $D0
# log.file.rotation.size = 0
{% if rabbitmq.config.log.rotation is defined %}
log.file.rotation.date = {{ rabbitmq.config.log.rotation.date|default('$D0') }}
log.file.rotation.size = {{ rabbitmq.config.log.rotation.size|default(0) }}
{% endif %}

## Logging to console (can be true or false)
##
# log.console = false
{% if rabbitmq.config.log.console is defined %}
log.console = {{ rabbitmq.config.log.console|default('false') }}
{% endif %}

## Log level for console logging
##
# log.console.level = info
{% if rabbitmq.config.log.level is defined %}
log.console.level = {{ rabbitmq.config.log.level|default('info') }}
{% endif %}

## Logging to the amq.rabbitmq.log exchange (can be true or false)
##
# log.exchange = false
{% if rabbitmq.config.log.exchange is defined %}
log.exchange = {{ rabbitmq.config.log.exchange|default('false') }}
{% endif %}

## Log level to use when logging to the amq.rabbitmq.log exchange
##
# log.exchange.level = info
{% if rabbitmq.config.log.level is defined %}
log.exchange.level = {{ rabbitmq.config.log.level|default('info') }}
{% endif %}



## ----------------------------------------------------------------------------
## RabbitMQ LDAP Plugin
##
## Related doc guide: https://rabbitmq.com/ldap.html.
##
## ----------------------------------------------------------------------------

# =======================================
# LDAP section
# =======================================

##
## Connecting to the LDAP server(s)
## ================================
##

## Specify servers to bind to. You *must* set this in order for the plugin
## to work properly.
##
# auth_ldap.servers.1 = your-server-name-goes-here

## You can define multiple servers
# auth_ldap.servers.2 = your-other-server

{% for item in rabbitmq.config.auth_ldap.servers|default([]) %}
auth_ldap.servers.{{loop.index}} = {{item}}
{% endfor %}

## Connect to the LDAP server using TLS
##
# auth_ldap.use_ssl = false
{% if rabbitmq.config.auth_ldap.use_ssl is defined %}
auth_ldap.use_ssl = {{ rabbitmq.config.auth_ldap.use_ssl|default('true') }}
{% endif %}

## Specify the LDAP port to connect to
##
# auth_ldap.port = 389
{% if rabbitmq.config.auth_ldap.use_ssl|default('false') == true %}
auth_ldap.port = 686
{% elif rabbitmq.config.auth_ldap.servers is defined %}
auth_ldap.port = 389
{% endif %}

## LDAP connection timeout, in milliseconds or 'infinity'
##
# auth_ldap.timeout = infinity

## Or number
# auth_ldap.timeout = 500

{% if rabbitmq.config.auth_ldap.timeout is defined %}
auth_ldap.timeout = {{ rabbitmq.config.auth_ldap.timeout|default(300) }}
{% endif %}

## Enable logging of LDAP queries.
## One of
##   - false (no logging is performed)
##   - true (verbose logging of the logic used by the plugin)
##   - network (as true, but additionally logs LDAP network traffic)
##
## Defaults to false.
##
# auth_ldap.log = false

## Also can be true or network
# auth_ldap.log = true
# auth_ldap.log = network

{% if rabbitmq.config.auth_ldap.log is defined %}
auth_ldap.log = {{ rabbitmq.config.auth_ldap.log|default('false') }}
{% endif %}

##
## Authentication
## ==============
##

## Pattern to convert the username given through AMQP to a DN before
## binding
##
# auth_ldap.user_dn_pattern = cn=${username},ou=People,dc=example,dc=com
{% if rabbitmq.config.auth_ldap.user_dn_pattern is defined %}
auth_ldap.user_dn_pattern = {{ rabbitmq.config.auth_ldap.user_dn_pattern }}
{% endif %}

## Alternatively, you can convert a username to a Distinguished
## Name via an LDAP lookup after binding. See the documentation for
## full details.

## When converting a username to a dn via a lookup, set these to
## the name of the attribute that represents the user name, and the
## base DN for the lookup query.
##
# auth_ldap.dn_lookup_attribute = userPrincipalName
# auth_ldap.dn_lookup_base      = DC=gopivotal,DC=com
{% if rabbitmq.config.auth_ldap.dn_lookup_attribute is defined %}
auth_ldap.dn_lookup_attribute = {{ rabbitmq.config.auth_ldap.dn_lookup_attribute|default('userPrincipalName') }}
{% endif %}
{% if rabbitmq.config.auth_ldap.dn_lookup_base is defined %}
auth_ldap.dn_lookup_base = {{ rabbitmq.config.auth_ldap.dn_lookup_base }}
{% endif %}

## Controls how to bind for authorisation queries and also to
## retrieve the details of users logging in without presenting a
## password (e.g., SASL EXTERNAL).
## One of
##  - as_user (to bind as the authenticated user - requires a password)
##  - anon    (to bind anonymously)
##  - {UserDN, Password} (to bind with a specified user name and password)
##
## Defaults to 'as_user'.
##
# auth_ldap.other_bind = as_user

## Or can be more complex:
# auth_ldap.other_bind.user_dn  = User
# auth_ldap.other_bind.password = Password

## If user_dn and password defined - other options is ignored.

{% if rabbitmq.config.auth_ldap.other_bind.user_dn is defined %}
auth_ldap.other_bind.user_dn = {{ rabbitmq.config.auth_ldap.other_bind.user_dn }}
auth_ldap.other_bind.password = {{ rabbitmq.config.auth_ldap.other_bind.password }}
{% elif rabbitmq.config.auth_ldap.other_bind is defined %}
auth_ldap.other_bind = {{ rabbitmq.config.auth_ldap.other_bind }}
{% endif %}

# -----------------------------
# Too complex section of LDAP
# -----------------------------

##
## Authorisation
## =============
##

## The LDAP plugin can perform a variety of queries against your
## LDAP server to determine questions of authorisation.
##
## Related doc guide: https://rabbitmq.com/ldap.html#authorisation.

## Following configuration should be defined in advanced.config file
## DO NOT UNCOMMENT THESE LINES!

## Set the query to use when determining vhost access
##
## {vhost_access_query, {in_group,
##                       "ou=${vhost}-users,ou=vhosts,dc=example,dc=com"}},

## Set the query to use when determining resource (e.g., queue) access
##
## {resource_access_query, {constant, true}},

## Set queries to determine which tags a user has
##
## {tag_queries, []}
#   ]},
# -----------------------------